{"ast":null,"code":"var _jsxFileName = \"/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/src/components/accordion/AccordionSection.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GenesysDevIcons, GenesysDevIcon } from 'genesys-dev-icons/lib/index';\nimport './AccordionSection.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * An expandable component of the accordion.\n * \n * @param props\n * @returns \n */\nexport function AccordionSection(props) {\n  _s();\n\n  const [isExpanded, setIsExpanded] = useState(props.data.showExpanded);\n  const {\n    data\n  } = props;\n  const {\n    content,\n    heading\n  } = data;\n  const sectionContent = isExpanded ? content : undefined;\n  const sectionClasses = `accordion-section${data.sectionClass ? ' ' + data.sectionClass : ''}`;\n  const contentClasses = `content${data.contentClass ? ' ' + data.contentClass : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: sectionClasses,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"header\",\n      onClick: () => setIsExpanded(!isExpanded),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"header-left\",\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"header-right\",\n        children: /*#__PURE__*/_jsxDEV(GenesysDevIcon, {\n          className: \"chevron\",\n          icon: isExpanded ? GenesysDevIcons.AppChevronDown : GenesysDevIcons.AppChevronUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isExpanded ? contentClasses : '',\n      children: sectionContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AccordionSection, \"pPhjlh6Oa3A9YcInPnbLzKG864c=\");\n\n_c = AccordionSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccordionSection\");","map":{"version":3,"sources":["/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/src/components/accordion/AccordionSection.tsx"],"names":["React","useState","GenesysDevIcons","GenesysDevIcon","AccordionSection","props","isExpanded","setIsExpanded","data","showExpanded","content","heading","sectionContent","undefined","sectionClasses","sectionClass","contentClasses","contentClass","AppChevronDown","AppChevronUp"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,6BAAhD;AAEA,OAAO,yBAAP;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAyD;AAAA;;AAC5D,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAUI,KAAK,CAACG,IAAN,CAAWC,YAArB,CAA5C;AAEA,QAAM;AAAED,IAAAA;AAAF,MAAWH,KAAjB;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBH,IAA7B;AACA,QAAMI,cAAc,GAAGN,UAAU,GAAGI,OAAH,GAAaG,SAA9C;AACA,QAAMC,cAAc,GAAI,oBAAmBN,IAAI,CAACO,YAAL,GAAoB,MAAMP,IAAI,CAACO,YAA/B,GAA8C,EAAG,EAA5F;AACA,QAAMC,cAAc,GAAI,UAASR,IAAI,CAACS,YAAL,GAAoB,MAAMT,IAAI,CAACS,YAA/B,GAA8C,EAAG,EAAlF;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEH,cAAhB;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,QAAd;AAAuB,MAAA,OAAO,EAAE,MAAMP,aAAa,CAAC,CAACD,UAAF,CAAnD;AAAA,8BACI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA,kBAA+BK;AAA/B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,+BACI,QAAC,cAAD;AAAgB,UAAA,SAAS,EAAC,SAA1B;AAAoC,UAAA,IAAI,EAAEL,UAAU,GAAGJ,eAAe,CAACgB,cAAnB,GAAoChB,eAAe,CAACiB;AAAxG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAK,MAAA,SAAS,EAAEb,UAAU,GAAGU,cAAH,GAAoB,EAA9C;AAAA,gBACKJ;AADL;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAtBeR,gB;;KAAAA,gB","sourcesContent":["import React, { useState } from 'react';\nimport { GenesysDevIcons, GenesysDevIcon } from 'genesys-dev-icons/lib/index';\nimport { AccordionData } from './Accordion';\nimport './AccordionSection.scss';\n\ninterface IAccordionSectionProps {\n    data: AccordionData,\n}\n\n/**\n * An expandable component of the accordion.\n * \n * @param props\n * @returns \n */\nexport function AccordionSection(props: IAccordionSectionProps) {\n    const [isExpanded, setIsExpanded] = useState<boolean>(props.data.showExpanded);\n\n    const { data } = props;\n    const { content, heading } = data;\n    const sectionContent = isExpanded ? content : undefined;\n    const sectionClasses = `accordion-section${data.sectionClass ? ' ' + data.sectionClass : ''}`\n    const contentClasses = `content${data.contentClass ? ' ' + data.contentClass : ''}`\n\n    return (\n        <div className={sectionClasses}>\n            <h4 className=\"header\" onClick={() => setIsExpanded(!isExpanded)}>\n                <span className=\"header-left\">{heading}</span>\n                <span className=\"header-right\">\n                    <GenesysDevIcon className=\"chevron\" icon={isExpanded ? GenesysDevIcons.AppChevronDown : GenesysDevIcons.AppChevronUp} />\n                </span>\n            </h4>\n            <div className={isExpanded ? contentClasses : ''}>\n                {sectionContent}\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}