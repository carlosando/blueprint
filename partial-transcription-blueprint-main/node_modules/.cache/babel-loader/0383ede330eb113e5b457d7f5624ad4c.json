{"ast":null,"code":"/**\n * This file manages the channel that listens to conversation events.\n */\nconst platformClient = require('purecloud-platform-client-v2/dist/node/purecloud-platform-client-v2.js');\n\nconst notificationsApi = new platformClient.NotificationsApi();\nlet channel = {};\nlet ws = null; // Object that will contain the subscription topic as key and the\n// callback function as the value\n\nconst subscriptionMap = {\n  'channel.metadata': () => {\n    console.log('Notification heartbeat.');\n  }\n};\n/**\n * Callback function for notications event-handling.\n * It will reference the subscriptionMap to determine what function to run\n * @param {Object} event \n */\n\nfunction onSocketMessage(event) {\n  const data = JSON.parse(event.data);\n  subscriptionMap[data.topicName](data);\n}\n/**\n * Creation of the channel. If called multiple times,\n * the last one will be the active one.\n */\n\n\nexport function createChannel() {\n  return notificationsApi.postNotificationsChannels().then(data => {\n    console.log('---- Created Notifications Channel ----');\n    channel = data;\n    ws = new WebSocket(channel.connectUri);\n    ws.onmessage = onSocketMessage;\n  });\n}\n/**\n * Add a subscription to the channel\n * @param {String} topic Genesys Cloud notification topic string\n * @param {Function} callback callback function to fire when the event occurs\n */\n\nexport function addSubscription(topic, callback) {\n  const body = [{\n    'id': topic\n  }];\n  return notificationsApi.postNotificationsChannelSubscriptions(channel.id, body).then(data => {\n    subscriptionMap[topic] = callback;\n    console.log(`Added subscription to ${topic}`, data);\n  }).catch(err => {\n    console.error('Error adding subscription', err);\n    return err;\n  });\n}\n/**\n * Remove a subscription from the channel\n * @param {String} topic Genesys Cloud notification topic string\n * @param {Function} callback callback function to fire when the event occurs\n */\n\nexport async function removeSubscription(topic, callback) {\n  const {\n    entities = []\n  } = await notificationsApi.getNotificationsChannelSubscriptions(channel.id);\n  const body = entities.filter(entity => entity.id !== topic);\n  return notificationsApi.postNotificationsChannelSubscriptions(channel.id, body).then(data => {\n    subscriptionMap[topic] = callback;\n    console.log(`Removed subscription to ${topic}`);\n  });\n}","map":{"version":3,"sources":["/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/src/utils/notificationsController.ts"],"names":["platformClient","require","notificationsApi","NotificationsApi","channel","ws","subscriptionMap","console","log","onSocketMessage","event","data","JSON","parse","topicName","createChannel","postNotificationsChannels","then","WebSocket","connectUri","onmessage","addSubscription","topic","callback","body","postNotificationsChannelSubscriptions","id","catch","err","error","removeSubscription","entities","getNotificationsChannelSubscriptions","filter","entity"],"mappings":"AAAA;AACA;AACA;AAgBA,MAAMA,cAAc,GAAGC,OAAO,CAAC,wEAAD,CAA9B;;AACA,MAAMC,gBAAgB,GAAG,IAAIF,cAAc,CAACG,gBAAnB,EAAzB;AAEA,IAAIC,OAAY,GAAG,EAAnB;AACA,IAAIC,EAAE,GAAG,IAAT,C,CAEA;AACA;;AACA,MAAMC,eAAoB,GAAG;AACzB,sBAAoB,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;AAHwB,CAA7B;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAqC;AACjC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,IAAjB,CAAb;AAEAL,EAAAA,eAAe,CAACK,IAAI,CAACG,SAAN,CAAf,CAAgCH,IAAhC;AACH;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASI,aAAT,GAAyB;AAC7B,SAAOb,gBAAgB,CAACc,yBAAjB,GACNC,IADM,CACAN,IAAD,IAA4B;AAC7BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAJ,IAAAA,OAAO,GAAGO,IAAV;AACAN,IAAAA,EAAE,GAAG,IAAIa,SAAJ,CAAcd,OAAO,CAACe,UAAtB,CAAL;AACAd,IAAAA,EAAE,CAACe,SAAH,GAAeX,eAAf;AACJ,GANM,CAAP;AAOF;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,eAAT,CAAyBC,KAAzB,EAAwCC,QAAxC,EAAuD;AAC1D,QAAMC,IAAI,GAAG,CAAC;AAAC,UAAMF;AAAP,GAAD,CAAb;AACA,SAAOpB,gBAAgB,CAACuB,qCAAjB,CAAuDrB,OAAO,CAACsB,EAA/D,EAAmEF,IAAnE,EACHP,IADG,CACGN,IAAD,IAAiC;AACnCL,IAAAA,eAAe,CAACgB,KAAD,CAAf,GAAyBC,QAAzB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBc,KAAM,EAA3C,EAA8CX,IAA9C;AACH,GAJG,EAKHgB,KALG,CAKIC,GAAD,IAAc;AACjBrB,IAAAA,OAAO,CAACsB,KAAR,CAAc,2BAAd,EAA2CD,GAA3C;AACA,WAAOA,GAAP;AACH,GARG,CAAP;AASH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,kBAAf,CAAkCR,KAAlC,EAAiDC,QAAjD,EAAgE;AACnE,QAAM;AAAEQ,IAAAA,QAAQ,GAAG;AAAb,MAAoB,MAAM7B,gBAAgB,CAAC8B,oCAAjB,CAAsD5B,OAAO,CAACsB,EAA9D,CAAhC;AACA,QAAMF,IAAI,GAAGO,QAAQ,CAACE,MAAT,CAAiBC,MAAD,IAAiBA,MAAM,CAACR,EAAP,KAAcJ,KAA/C,CAAb;AACA,SAAOpB,gBAAgB,CAACuB,qCAAjB,CAAuDrB,OAAO,CAACsB,EAA/D,EAAmEF,IAAnE,EACHP,IADG,CACGN,IAAD,IAAiC;AACnCL,IAAAA,eAAe,CAACgB,KAAD,CAAf,GAAyBC,QAAzB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0Bc,KAAM,EAA7C;AACH,GAJG,CAAP;AAKH","sourcesContent":["/**\n * This file manages the channel that listens to conversation events.\n */\n\n interface IChannelResponse {\n    connectUri: string,\n    expires: string,\n    id: string\n}\n\ninterface IEntity {\n    id: string\n}\n\ninterface ISubscriptionResponse {\n    entities: IEntity[]\n}\n\nconst platformClient = require('purecloud-platform-client-v2/dist/node/purecloud-platform-client-v2.js');\nconst notificationsApi = new platformClient.NotificationsApi();\n \nlet channel: any = {};\nlet ws = null;\n \n// Object that will contain the subscription topic as key and the\n// callback function as the value\nconst subscriptionMap: any = {\n    'channel.metadata': () => {\n        console.log('Notification heartbeat.');\n    }\n};\n \n/**\n * Callback function for notications event-handling.\n * It will reference the subscriptionMap to determine what function to run\n * @param {Object} event \n */\nfunction onSocketMessage(event: any) {\n    const data = JSON.parse(event.data);\n\n    subscriptionMap[data.topicName](data);\n}\n\n/**\n * Creation of the channel. If called multiple times,\n * the last one will be the active one.\n */\nexport function createChannel() {\n   return notificationsApi.postNotificationsChannels()\n   .then((data: IChannelResponse) => {\n        console.log('---- Created Notifications Channel ----');\n        channel = data;\n        ws = new WebSocket(channel.connectUri);\n        ws.onmessage = onSocketMessage;\n   });\n}\n\n/**\n * Add a subscription to the channel\n * @param {String} topic Genesys Cloud notification topic string\n * @param {Function} callback callback function to fire when the event occurs\n */\nexport function addSubscription(topic: string, callback: any) {\n    const body = [{'id': topic}];\n    return notificationsApi.postNotificationsChannelSubscriptions(channel.id, body)\n       .then((data: ISubscriptionResponse) => {\n           subscriptionMap[topic] = callback;\n           console.log(`Added subscription to ${topic}`, data);\n       })\n       .catch((err: any) => {\n           console.error('Error adding subscription', err);\n           return err;\n       });\n}\n\n/**\n * Remove a subscription from the channel\n * @param {String} topic Genesys Cloud notification topic string\n * @param {Function} callback callback function to fire when the event occurs\n */\nexport async function removeSubscription(topic: string, callback: any) {\n    const { entities = [] } = await notificationsApi.getNotificationsChannelSubscriptions(channel.id);\n    const body = entities.filter((entity: any) => entity.id !== topic);\n    return notificationsApi.postNotificationsChannelSubscriptions(channel.id, body)\n       .then((data: ISubscriptionResponse) => {\n           subscriptionMap[topic] = callback;\n           console.log(`Removed subscription to ${topic}`);\n       });\n}"]},"metadata":{},"sourceType":"module"}