{"ast":null,"code":"/**\r\n * Error thrown when addSection is called with a section\r\n * that already exists.\r\n * @param {string} section - Section Name\r\n * @constructor\r\n */\nfunction DuplicateSectionError(section) {\n  this.name = 'DuplicateSectionError';\n  this.message = section + ' already exists';\n  Error.captureStackTrace(this, this.constructor);\n}\n/**\r\n * Error thrown when the section being accessed, does\r\n * not exist.\r\n * @param {string} section - Section Name\r\n * @constructor\r\n */\n\n\nfunction NoSectionError(section) {\n  this.name = this.constructor.name;\n  this.message = 'Section ' + section + ' does not exist.';\n  Error.captureStackTrace(this, this.constructor);\n}\n/**\r\n * Error thrown when a file is being parsed.\r\n * @param {string} filename - File name\r\n * @param {int} lineNumber - Line Number\r\n * @param {string} line - Contents of the line\r\n * @constructor\r\n */\n\n\nfunction ParseError(filename, lineNumber, line) {\n  this.name = this.constructor.name;\n  this.message = 'Source contains parsing errors.\\nfile: ' + filename + ' line: ' + lineNumber + '\\n' + line;\n  Error.captureStackTrace(this, this.constructor);\n}\n/**\r\n * Error thrown when there are no section headers present\r\n * in a file.\r\n * @param {string} filename - File name\r\n * @param {int} lineNumber - Line Number\r\n * @param {string} line - Contents of the line\r\n * @constructor\r\n */\n\n\nfunction MissingSectionHeaderError(filename, lineNumber, line) {\n  this.name = this.constructor.name;\n  this.message = 'File contains no section headers.\\nfile: ' + filename + ' line: ' + lineNumber + '\\n' + line;\n  Error.captureStackTrace(this, this.constructor);\n}\n/**\r\n * Error thrown when the interpolate function exceeds the maximum recursion\r\n * depth.\r\n * @param {string} section - Section Name\r\n * @param {string} key - Key Name\r\n * @param {string} value - Key Value\r\n * @param {int} maxDepth - Maximum recursion depth\r\n * @constructor\r\n */\n\n\nfunction MaximumInterpolationDepthError(section, key, value, maxDepth) {\n  this.name = this.constructor.name;\n  this.message = 'Exceeded Maximum Recursion Depth (' + maxDepth + ') for key ' + key + ' in section ' + section + '\\nvalue: ' + value;\n  Error.captureStackTrace(this, this.constructor);\n}\n\nmodule.exports = {\n  DuplicateSectionError,\n  NoSectionError,\n  ParseError,\n  MissingSectionHeaderError,\n  MaximumInterpolationDepthError\n};","map":{"version":3,"sources":["/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/node_modules/configparser/src/errors.js"],"names":["DuplicateSectionError","section","name","message","Error","captureStackTrace","constructor","NoSectionError","ParseError","filename","lineNumber","line","MissingSectionHeaderError","MaximumInterpolationDepthError","key","value","maxDepth","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,OAAKC,IAAL,GAAY,uBAAZ;AACA,OAAKC,OAAL,GAAeF,OAAO,GAAG,iBAAzB;AACAG,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBN,OAAxB,EAAiC;AAC7B,OAAKC,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,OAAKC,OAAL,GAAgB,aAAaF,OAAb,GAAuB,kBAAvC;AACAG,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,IAA1C,EAAgD;AAC5C,OAAKT,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,OAAKC,OAAL,GAAe,4CAA4CM,QAA5C,GACX,SADW,GACCC,UADD,GACc,IADd,GACqBC,IADpC;AAEAP,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,yBAAT,CAAmCH,QAAnC,EAA6CC,UAA7C,EAAyDC,IAAzD,EAA+D;AAC3D,OAAKT,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,OAAKC,OAAL,GAAe,8CAA8CM,QAA9C,GACX,SADW,GACCC,UADD,GACc,IADd,GACqBC,IADpC;AAEAP,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,8BAAT,CAAwCZ,OAAxC,EAAiDa,GAAjD,EAAsDC,KAAtD,EAA6DC,QAA7D,EAAuE;AACnE,OAAKd,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,OAAKC,OAAL,GAAe,uCAAuCa,QAAvC,GACX,YADW,GACIF,GADJ,GACU,cADV,GAC2Bb,OAD3B,GACqC,WADrC,GACmDc,KADlE;AAEAX,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACH;;AAEDW,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,qBADa;AAEbO,EAAAA,cAFa;AAGbC,EAAAA,UAHa;AAIbI,EAAAA,yBAJa;AAKbC,EAAAA;AALa,CAAjB","sourcesContent":["/**\r\n * Error thrown when addSection is called with a section\r\n * that already exists.\r\n * @param {string} section - Section Name\r\n * @constructor\r\n */\r\nfunction DuplicateSectionError(section) {\r\n    this.name = 'DuplicateSectionError';\r\n    this.message = section + ' already exists';\r\n    Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\n/**\r\n * Error thrown when the section being accessed, does\r\n * not exist.\r\n * @param {string} section - Section Name\r\n * @constructor\r\n */\r\nfunction NoSectionError(section) {\r\n    this.name = this.constructor.name;\r\n    this.message =  'Section ' + section + ' does not exist.';\r\n    Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\n/**\r\n * Error thrown when a file is being parsed.\r\n * @param {string} filename - File name\r\n * @param {int} lineNumber - Line Number\r\n * @param {string} line - Contents of the line\r\n * @constructor\r\n */\r\nfunction ParseError(filename, lineNumber, line) {\r\n    this.name = this.constructor.name;\r\n    this.message = 'Source contains parsing errors.\\nfile: ' + filename +\r\n        ' line: ' + lineNumber + '\\n' + line;\r\n    Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\n/**\r\n * Error thrown when there are no section headers present\r\n * in a file.\r\n * @param {string} filename - File name\r\n * @param {int} lineNumber - Line Number\r\n * @param {string} line - Contents of the line\r\n * @constructor\r\n */\r\nfunction MissingSectionHeaderError(filename, lineNumber, line) {\r\n    this.name = this.constructor.name;\r\n    this.message = 'File contains no section headers.\\nfile: ' + filename +\r\n        ' line: ' + lineNumber + '\\n' + line;\r\n    Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\n/**\r\n * Error thrown when the interpolate function exceeds the maximum recursion\r\n * depth.\r\n * @param {string} section - Section Name\r\n * @param {string} key - Key Name\r\n * @param {string} value - Key Value\r\n * @param {int} maxDepth - Maximum recursion depth\r\n * @constructor\r\n */\r\nfunction MaximumInterpolationDepthError(section, key, value, maxDepth) {\r\n    this.name = this.constructor.name;\r\n    this.message = 'Exceeded Maximum Recursion Depth (' + maxDepth +\r\n        ') for key ' + key + ' in section ' + section + '\\nvalue: ' + value;\r\n    Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\nmodule.exports = {\r\n    DuplicateSectionError,\r\n    NoSectionError,\r\n    ParseError,\r\n    MissingSectionHeaderError,\r\n    MaximumInterpolationDepthError\r\n};"]},"metadata":{},"sourceType":"script"}