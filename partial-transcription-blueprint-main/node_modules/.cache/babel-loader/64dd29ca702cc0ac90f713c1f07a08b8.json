{"ast":null,"code":"var _jsxFileName = \"/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/src/components/conversation/Conversation.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport { Standing } from '../queue-list/QueueList';\nimport './Conversation.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Conversation component\n * \n * @param props \n * @returns \n */\nexport function Conversation(props) {\n  _s();\n\n  var _props$conversation2, _conversation$startTi, _conversation$assigne, _conversation$assigne2, _conversation$interac;\n\n  const {\n    conversation\n  } = props;\n  const transcriptRef = useRef(null); // autoscroll the transcript as it updates, like a chat window\n\n  useEffect(() => {\n    var _props$conversation;\n\n    if (((_props$conversation = props.conversation) === null || _props$conversation === void 0 ? void 0 : _props$conversation.interactions) && props.conversation.interactions.length > 0) {\n      var _transcriptRef$curren;\n\n      (_transcriptRef$curren = transcriptRef.current) === null || _transcriptRef$curren === void 0 ? void 0 : _transcriptRef$curren.scrollIntoView();\n    }\n  }, [(_props$conversation2 = props.conversation) === null || _props$conversation2 === void 0 ? void 0 : _props$conversation2.interactions]);\n  const standingStyles = {\n    'color': conversation.standing === Standing.badStanding ? 'red' : 'green'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversation\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"standing-header\",\n        style: standingStyles,\n        children: conversation.standing || Standing.goodStanding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-lower\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-group-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-title\",\n            children: \"Started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-name\",\n            children: [\" \", (_conversation$startTi = conversation.startTime) === null || _conversation$startTi === void 0 ? void 0 : _conversation$startTi.format('h:mm a').toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-group-bottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-title\",\n            children: \"Agent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-name\",\n            children: (_conversation$assigne = conversation.assignedAgent) === null || _conversation$assigne === void 0 ? void 0 : _conversation$assigne.agentName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agent-image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"agent\",\n            src: ((_conversation$assigne2 = conversation.assignedAgent) === null || _conversation$assigne2 === void 0 ? void 0 : _conversation$assigne2.imageUri) || ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-container\",\n        children: (_conversation$interac = conversation.interactions) === null || _conversation$interac === void 0 ? void 0 : _conversation$interac.map((interaction, index) => {\n          var _conversation$interac2;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: index === ((_conversation$interac2 = conversation.interactions) === null || _conversation$interac2 === void 0 ? void 0 : _conversation$interac2.length) - 1 ? transcriptRef : null,\n            className: \"interaction\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"speaker\",\n              children: interaction.speaker\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction-time\",\n              children: moment(interaction.timestamp).format('h:mm a').toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: interaction.transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Conversation, \"JQLxSy8OI8w5h+kOFTO1X9KNJso=\");\n\n_c = Conversation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"sources":["/Users/cando001/Documents/MyGit/blueprint/partial-transcription-blueprint-main/src/components/conversation/Conversation.tsx"],"names":["React","useEffect","useRef","moment","Standing","Conversation","props","conversation","transcriptRef","interactions","length","current","scrollIntoView","standingStyles","standing","badStanding","goodStanding","startTime","format","toString","assignedAgent","agentName","imageUri","map","interaction","index","speaker","timestamp","transcript"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAqCC,QAArC,QAAqD,yBAArD;AACA,OAAO,qBAAP;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AAAA;;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,KAAzB;AAEA,QAAME,aAA8C,GAAGN,MAAM,CAAC,IAAD,CAA7D,CAHwC,CAKxC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,QAAI,wBAAAK,KAAK,CAACC,YAAN,4EAAoBE,YAApB,KAAoCH,KAAK,CAACC,YAAN,CAAmBE,YAAnB,CAAgCC,MAAhC,GAAyC,CAAjF,EAAoF;AAAA;;AAChF,+BAAAF,aAAa,CAACG,OAAd,gFAAuBC,cAAvB;AACH;AACJ,GAJQ,EAIN,yBAACN,KAAK,CAACC,YAAP,yDAAC,qBAAoBE,YAArB,CAJM,CAAT;AAMA,QAAMI,cAAmB,GAAG;AACxB,aAASN,YAAY,CAACO,QAAb,KAA0BV,QAAQ,CAACW,WAAnC,GAAiD,KAAjD,GAAyD;AAD1C,GAA5B;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,KAAK,EAAEF,cAAxC;AAAA,kBACMN,YAAY,CAACO,QAAb,IAAyBV,QAAQ,CAACY;AADxC;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,qDAA+BT,YAAY,CAACU,SAA5C,0DAA+B,sBAAwBC,MAAxB,CAA+B,QAA/B,EAAyCC,QAAzC,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,+CAA8BZ,YAAY,CAACa,aAA3C,0DAA8B,sBAA4BC;AAA1D;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eASI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACI;AAAK,YAAA,GAAG,EAAC,OAAT;AAAiB,YAAA,GAAG,EAAE,2BAAAd,YAAY,CAACa,aAAb,kFAA4BE,QAA5B,KAAwC;AAA9D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAmBI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,2CACKf,YAAY,CAACE,YADlB,0DACK,sBAA2Bc,GAA3B,CAA+B,CAACC,WAAD,EAA2BC,KAA3B,KAA6C;AAAA;;AACzE,8BACI;AAAK,YAAA,GAAG,EAAEA,KAAK,KAAK,2BAAAlB,YAAY,CAACE,YAAb,kFAA2BC,MAA3B,IAAqC,CAA/C,GAAmDF,aAAnD,GAAmE,IAA7E;AAAmF,YAAA,SAAS,EAAC,aAA7F;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,wBAA0BgB,WAAW,CAACE;AAAtC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBACKvB,MAAM,CAACqB,WAAW,CAACG,SAAb,CAAN,CAA8BT,MAA9B,CAAqC,QAArC,EAA+CC,QAA/C;AADL;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAKI;AAAA,wBACKK,WAAW,CAACI;AADjB;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAWH,SAZA;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH;;GAxDevB,Y;;KAAAA,Y","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport { IConversation, Interaction, Standing } from '../queue-list/QueueList';\nimport './Conversation.scss';\n\ninterface IProps {\n    conversation: IConversation\n}\n\n/**\n * Conversation component\n * \n * @param props \n * @returns \n */\nexport function Conversation(props: IProps) {\n    const { conversation } = props;\n    \n    const transcriptRef: React.RefObject<HTMLDivElement> = useRef(null);\n\n    // autoscroll the transcript as it updates, like a chat window\n    useEffect(() => {\n        if (props.conversation?.interactions && props.conversation.interactions.length > 0) {\n            transcriptRef.current?.scrollIntoView();\n        }\n    }, [props.conversation?.interactions])\n\n    const standingStyles: any = {\n        'color': conversation.standing === Standing.badStanding ? 'red' : 'green'\n    };\n\n    return (\n        <div className=\"conversation\">\n            <div className=\"status-container\">\n                <div className=\"standing-header\" style={standingStyles}>\n                    {(conversation.standing || Standing.goodStanding)}\n                </div>\n                <div className=\"status-lower\">\n                    <div className=\"status-group-top\">\n                        <div className=\"status-title\">Started</div>\n                        <div className=\"status-name\"> {conversation.startTime?.format('h:mm a').toString()}</div>\n                    </div>\n                    <div className=\"status-group-bottom\">\n                        <div className=\"status-title\">Agent</div>\n                        <div className=\"status-name\">{conversation.assignedAgent?.agentName}</div>\n                    </div>\n                    <div className=\"agent-image\">\n                        <img alt=\"agent\" src={conversation.assignedAgent?.imageUri || ''} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"transcript-wrapper\">\n                <h5>Transcript</h5>\n                <div className=\"transcript-container\">\n                    {conversation.interactions?.map((interaction: Interaction, index: number) => {\n                        return (\n                            <div ref={index === conversation.interactions?.length! - 1 ? transcriptRef : null} className=\"interaction\">\n                                <div className=\"speaker\">{interaction.speaker}</div>\n                                <div className=\"interaction-time\">\n                                    {moment(interaction.timestamp).format('h:mm a').toString()}\n                                </div>\n                                <div>\n                                    {interaction.transcript}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}